<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>dev.webfx</groupId>
    <artifactId>webfx-parent</artifactId>
    <version>0.1.0-SNAPSHOT</version>

    <packaging>pom</packaging>

    <properties>
        <webfx.version>0.1.0-SNAPSHOT</webfx.version>
        <webfx.mainClass>dev.webfx.platform.boot.ApplicationBooter</webfx.mainClass>
        <webfx.mainModule>webfx.platform.shared.services.boot</webfx.mainModule>

        <!-- Java version -->
        <java.version>17</java.version> <!-- for compatibility with GWT -->
        <java.level>${java.version}</java.level>
        <gwt.sourceLevel>${java.level}</gwt.sourceLevel>

        <!-- Applying compiler settings -->
        <maven.compiler.source>${java.level}</maven.compiler.source>
        <maven.compiler.target>${java.level}</maven.compiler.target>
        <maven.compiler.release>${java.level}</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- OpenJFX version (used for -openjfx WebFX modules, including final -openjfx application executable modules) -->
        <openjfx.version>21.0.6</openjfx.version>

        <!-- Gluon version (used for xxx-gluon WebFX modules, including final xxx-gluon application executable modules) -->
        <gluon.gluonfx.plugin.version>1.0.23</gluon.gluonfx.plugin.version> <!-- => set Gluon Substrate version to 0.0.63 => targets Android SDK 34 -->
        <gluon.attach.version>4.0.20</gluon.attach.version> <!-- works with Gluon Substrate 0.0.59 or above -->

        <!-- J2CL version (used for xxx-j2cl WebFX modules, including final xxx-j2cl application executable modules) -->
        <!-- = v20230718-1 (indirectly set by Vertispan Maven plugin - See https://github.com/Vertispan/j2clmavenplugin/blob/v0.22.0/pom.xml#L90) -->
        <vertispan.j2cl.plugin.version>0.23-SNAPSHOT</vertispan.j2cl.plugin.version>
        <!-- J2CL compatible JSInterop version provided by Vertispan. Must match https://github.com/Vertispan/j2clmavenplugin/blob/v0.22.0/pom.xml#L118 -->
        <vertispan.jsinterop.base.version>1.0.1-1</vertispan.jsinterop.base.version>

        <!-- GWT version (used for -gwt WebFX modules, including final -gwt application executable modules) -->
        <gwt.version>2.12.2</gwt.version>
        <!-- GWT Maven plugin version. https://github.com/tbroyer/gwt-maven-plugin -->
        <tbroyer.gwt.plugin.version>1.1.0</tbroyer.gwt.plugin.version>

        <!-- Elemental2 version used together with GWT -->
        <elemental2.version>1.2.1</elemental2.version>
        <jsinterop.base.version>1.0.1</jsinterop.base.version> <!-- Since elemental2 1.2.1 it is necessary to explicitly set jsinterop version, otherwise GWT compilation fails -->
        <jsinterop.annotations.version>2.0.2</jsinterop.annotations.version> <!-- Now this dependency can be explicit in GWT source modules -->

        <!-- GWT-time version (GWT library to emulate java.time - not supported by default by GWT) -->
        <gwttime.version>2.0.12</gwttime.version>

        <!-- TeaVM version (used for -teavm WebFX modules, including future final -teavm application executable modules) -->
        <teavm.version>0.11.0</teavm.version> <!-- Unified version for TeaVM modules and TeaVM Maven plugin -->

        <!-- Vert.x version (used for -vertx WebFX modules, including final -vertx application executable modules) -->
        <vertx.version>5.0.4</vertx.version>

        <!-- Maven minimum required version -->
        <maven.min.version>3.3.1</maven.min.version>

        <!-- Maven plugins versions -->
        <plugin.compiler.version>3.11.0</plugin.compiler.version>
        <plugin.jar.version>3.3.0</plugin.jar.version>
        <plugin.source.version>3.3.0</plugin.source.version>
        <plugin.clean.version>3.2.0</plugin.clean.version>
        <plugin.deploy.version>3.1.1</plugin.deploy.version>
        <plugin.install.version>3.1.0</plugin.install.version>
        <plugin.site.version>4.0.0-M8</plugin.site.version>
        <plugin.reports.version>3.4.5</plugin.reports.version>
        <plugin.resources.version>3.3.1</plugin.resources.version>
        <plugin.surefire.version>3.1.2</plugin.surefire.version>
        <plugin.shade.version>3.5.0</plugin.shade.version>
        <plugin.enforcer.version>3.3.0</plugin.enforcer.version>

        <!-- New way to deploy snapshots in Maven Central using sonatype plugin -->
        <plugin.sonatype.central.publish>0.8.0</plugin.sonatype.central.publish>

        <!-- Other third-party plugins versions -->
        <plugin.buildhelper.version>3.3.0</plugin.buildhelper.version>
        <plugin.javapackager.version>1.7.6</plugin.javapackager.version>
        <plugin.javafx.version>0.0.8</plugin.javafx.version>

        <plugin.javacup.version>11b-20160615-3</plugin.javacup.version> <!-- Parser used for JSON, YAML & ORM expressions (in WebFX Stack) https://github.com/vbmacher/cup-maven-plugin -->
        <plugin.jflex.version>1.9.1</plugin.jflex.version>
        <plugin.teavm.version>${teavm.version}</plugin.teavm.version>

        <plugin.teavm.param.mainClass>TBD</plugin.teavm.param.mainClass>
        <plugin.teavm.param.targetType>JAVASCRIPT</plugin.teavm.param.targetType>
        <plugin.teavm.param.minifying>true</plugin.teavm.param.minifying>
        <plugin.teavm.param.debug>false</plugin.teavm.param.debug>

        <!-- Plugin parameters with default values or set to TBD (To Be Defined) by any child module using the plugin -->
        <plugin.webfx.param.export-phase>deploy</plugin.webfx.param.export-phase> <!-- can be set to verify on the dev machine for testing before deployment -->
        <plugin.compiler.param.exclude></plugin.compiler.param.exclude>
        <plugin.dependency.param.unpack-sources.phase>validate</plugin.dependency.param.unpack-sources.phase>
        <plugin.dependency.param.unpack-classes.phase>validate</plugin.dependency.param.unpack-classes.phase>
        <plugin.dependency.param.unpack-classes.includes>**</plugin.dependency.param.unpack-classes.includes>
        <plugin.dependency.param.unpack-classes.outputDirectory>${project.build.outputDirectory}</plugin.dependency.param.unpack-classes.outputDirectory>
        <plugin.dependency.param.copy-libs.phase>validate</plugin.dependency.param.copy-libs.phase>
        <plugin.shade.param.fat.phase>package</plugin.shade.param.fat.phase>
        <plugin.site.param.topSiteURL>https://site.webfx.dev</plugin.site.param.topSiteURL>
        <plugin.j2cl.compilationLevel>ADVANCED</plugin.j2cl.compilationLevel>
        <plugin.j2cl.enableSourcemaps>false</plugin.j2cl.enableSourcemaps>
        <plugin.gwt.param.skipCompilation>true</plugin.gwt.param.skipCompilation>
        <plugin.gwt.param.draftCompile>false</plugin.gwt.param.draftCompile>
        <plugin.gwt.param.style>OBF</plugin.gwt.param.style>
        <plugin.gwt.param.optimize>9</plugin.gwt.param.optimize>
        <plugin.gwt.param.module>${project.artifactId}</plugin.gwt.param.module>
        <plugin.gluonfx.param.target>TBD</plugin.gluonfx.param.target>
        <plugin.gluonfx.param.mainClass>${webfx.mainClass}</plugin.gluonfx.param.mainClass>
        <plugin.javapackager.mainClass>${webfx.mainClass}</plugin.javapackager.mainClass>
        <plugin.javapackager.runnableJar>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</plugin.javapackager.runnableJar>
        <plugin.javapackager.name>WebFXApp</plugin.javapackager.name>
        <plugin.javapackager.displayName>WebFX Application</plugin.javapackager.displayName>
        <plugin.javapackager.url>TBD</plugin.javapackager.url>
        <plugin.javapackager.organizationName>WebFX</plugin.javapackager.organizationName>
        <plugin.javapackager.organizationUrl>https://webfx.dev</plugin.javapackager.organizationUrl>
        <plugin.javapackager.organizationEmail>info@webfx.dev</plugin.javapackager.organizationEmail>

        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'.000'X</maven.build.timestamp.format>

        <webfx.meta.environment>development</webfx.meta.environment>

    </properties>

    <dependencyManagement>

        <dependencies>

            <!-- Setting version for OpenJFX modules -->
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-base</artifactId>
                <version>${openjfx.version}</version>
            </dependency>
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-graphics</artifactId>
                <version>${openjfx.version}</version>
            </dependency>
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-controls</artifactId>
                <version>${openjfx.version}</version>
            </dependency>
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-web</artifactId>
                <version>${openjfx.version}</version>
            </dependency>
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-media</artifactId>
                <version>${openjfx.version}</version>
            </dependency>
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-fxml</artifactId>
                <version>${openjfx.version}</version>
            </dependency>
            <dependency> <!-- Not emulated by WebFX but may be used in some pure OpenJFX modules -->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-swing</artifactId>
                <version>${openjfx.version}</version>
            </dependency>

            <!-- Setting version for GWT modules -->
            <dependency>
                <groupId>org.gwtproject</groupId>
                <artifactId>gwt-user</artifactId>
                <version>${gwt.version}</version>
            </dependency>
            <dependency>
                <groupId>org.gwtproject</groupId>
                <artifactId>gwt-dev</artifactId>
                <version>${gwt.version}</version>
            </dependency>

            <!-- Setting version for JsInterop modules -->
            <dependency>
                <groupId>com.google.jsinterop</groupId>
                <artifactId>base</artifactId>
                <version>${jsinterop.base.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.jsinterop</groupId>
                <artifactId>jsinterop-annotations</artifactId>
                <version>${jsinterop.annotations.version}</version>
            </dependency>

            <!-- Setting version for Elemental2 modules -->
            <dependency>
                <groupId>com.google.elemental2</groupId>
                <artifactId>elemental2-core</artifactId>
                <version>${elemental2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.elemental2</groupId>
                <artifactId>elemental2-dom</artifactId>
                <version>${elemental2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.elemental2</groupId>
                <artifactId>elemental2-media</artifactId>
                <version>${elemental2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.elemental2</groupId>
                <artifactId>elemental2-promise</artifactId>
                <version>${elemental2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.elemental2</groupId>
                <artifactId>elemental2-svg</artifactId>
                <version>${elemental2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.elemental2</groupId>
                <artifactId>elemental2-webgl</artifactId>
                <version>${elemental2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.elemental2</groupId>
                <artifactId>elemental2-webstorage</artifactId>
                <version>${elemental2.version}</version>
            </dependency>

            <!-- Setting version for GWT-time modules -->
            <dependency>
                <groupId>org.jresearch.gwt.time</groupId>
                <artifactId>org.jresearch.gwt.time</artifactId>
                <version>${gwttime.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jresearch.gwt.time</groupId>
                <artifactId>org.jresearch.gwt.time.tzdb</artifactId>
                <version>${gwttime.version}</version>
            </dependency>

            <!-- Setting version for TeaVM modules -->
            <dependency>
                <groupId>org.teavm</groupId>
                <artifactId>teavm-interop</artifactId>
                <version>${teavm.version}</version>
            </dependency>
            <dependency>
                <groupId>org.teavm</groupId>
                <artifactId>teavm-jso</artifactId>
                <version>${teavm.version}</version>
            </dependency>
            <dependency>
                <groupId>org.teavm</groupId>
                <artifactId>teavm-jso-apis</artifactId>
                <version>${teavm.version}</version>
            </dependency>

            <!-- Setting the version for Gluon Attach modules -->
            <dependency>
                <groupId>com.gluonhq.attach</groupId>
                <artifactId>audio</artifactId>
                <version>${gluon.attach.version}</version>
            </dependency>
            <dependency>
                <groupId>com.gluonhq.attach</groupId>
                <artifactId>browser</artifactId>
                <version>${gluon.attach.version}</version>
            </dependency>
            <dependency>
                <groupId>com.gluonhq.attach</groupId>
                <artifactId>lifecycle</artifactId>
                <version>${gluon.attach.version}</version>
            </dependency>
            <dependency>
                <groupId>com.gluonhq.attach</groupId>
                <artifactId>statusbar</artifactId>
                <version>${gluon.attach.version}</version>
            </dependency>
            <dependency>
                <groupId>com.gluonhq.attach</groupId>
                <artifactId>storage</artifactId>
                <version>${gluon.attach.version}</version>
            </dependency>
            <dependency>
                <groupId>com.gluonhq.attach</groupId>
                <artifactId>util</artifactId>
                <version>${gluon.attach.version}</version>
            </dependency>

            <!-- Setting version for Vert.x modules -->
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-core</artifactId>
                <version>${vertx.version}</version>
            </dependency>
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-bridge-common</artifactId>
                <version>${vertx.version}</version>
            </dependency>
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-web</artifactId>
                <version>${vertx.version}</version>
            </dependency>
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-web-client</artifactId>
                <version>${vertx.version}</version>
            </dependency>
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-web-common</artifactId>
                <version>${vertx.version}</version>
            </dependency>

        </dependencies>

    </dependencyManagement>

    <pluginRepositories>

        <!-- Required to get the WebFX Maven plugin SNAPSHOT version -->
        <pluginRepository>
            <id>webfx-plugin-snapshots</id>
            <url>https://central.sonatype.com/repository/maven-snapshots/</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>

    </pluginRepositories>

    <repositories>

        <!-- For Gluon -->
        <repository>
            <id>gluon-repository</id>
            <url>https://nexus.gluonhq.com/nexus/content/repositories/releases</url>
            <releases><enabled>true</enabled></releases>
            <snapshots><enabled>false</enabled></snapshots>
        </repository>

    </repositories>

    <distributionManagement>

        <!-- Repository to use to deploy official webfx libraries -->
        <!-- Was old OSSRH repo now deprecated and replaced by central-publishing-maven-plugin
        <snapshotRepository>
            <id>webfx-sonatype-deploy</id> &lt;!&ndash; server username and password must be set in settings.xml &ndash;&gt;
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>-->

        <!-- This section is required for building site with mvn site:stage -->
        <site>
            <id>${project.artifactId}-site</id>
            <!-- Filling obligatory url parameter with arbitrary value (links will be relative in the end) -->
            <url>${plugin.site.param.topSiteURL}</url>
        </site>

    </distributionManagement>

    <build>

        <pluginManagement>
            <!-- plugins listed here are just pre-configured for a possible use in a module -->
            <plugins>

                <!-- Setting an explicit fixed version for the compiler plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${plugin.compiler.version}</version>
                    <configuration>
                        <release>${java.version}</release>
                    </configuration>
                </plugin>

                <!-- Setting an explicit fixed version for the clean plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${plugin.clean.version}</version>
                </plugin>

                <!-- Setting an explicit fixed version for the Maven deploy plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${plugin.deploy.version}</version>
                    <!-- We deploy at the end to avoid incomplete deployment when builds fails -->
                    <!-- This also ensures that the WebFX plugin is called before the Maven deploy plugin
                         (otherwise the exported webfx.xml is generated too late and is not uploaded!) -->
                    <configuration>
                        <deployAtEnd>true</deployAtEnd>
                    </configuration>
                </plugin>

                <!-- Setting an explicit fixed version for the Maven install plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${plugin.install.version}</version>
                </plugin>

                <!-- Setting an explicit fixed version for the Maven site plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${plugin.site.version}</version>
                    <configuration>
                        <topSiteURL>${plugin.site.param.topSiteURL}</topSiteURL>
                    </configuration>
                </plugin>

                <!-- Setting an explicit fixed version for the Maven reports plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>${plugin.reports.version}</version>
                </plugin>

                <!-- Setting an explicit fixed version for the Maven resources plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${plugin.resources.version}</version>
                </plugin>

                <!-- Setting an explicit fixed version for the Maven surefire plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${plugin.surefire.version}</version>
                </plugin>

                <!-- Setting an explicit fixed version for the Maven enforcer plugin -->
                <!-- And configure it to check the required Maven version -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${plugin.enforcer.version}</version>
                    <executions>
                        <execution>
                            <id>enforce-maven</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <rules>
                                    <requireMavenVersion>
                                        <version>${maven.min.version}</version>
                                    </requireMavenVersion>
                                </rules>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 **********************************
                 * Maven jar plugin configuration *
                 **********************************
                 -->
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${plugin.jar.version}</version>
                </plugin>


                <!--
                 **************************************
                 * Maven sources plugin configuration *
                 **************************************
                 Plugin to generate the source artifacts which will be used by GWT which is java source code transpiler (and not a bytecode transpiler like TeaVM)
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${plugin.source.version}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 ******************************
                 * Shade plugin configuration *
                 ******************************
                 Shade is a plugin to build fat jars (with all dependencies included in it)
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${plugin.shade.version}</version>
                    <executions>
                        <execution>
                            <id>fat</id>
                            <phase>${plugin.shade.param.fat.phase}</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                            <configuration>
                                <!-- the output will have the classifier "-fat"  -->
                                <shadedArtifactAttached>true</shadedArtifactAttached>
                                <shadedClassifierName>fat</shadedClassifierName>
                                <transformers>
                                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                        <manifestEntries>
                                            <Main-Class>${webfx.mainClass}</Main-Class>
                                            <Class-Path></Class-Path>
                                        </manifestEntries>
                                    </transformer>
                                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                </transformers>
                                <filters>
                                    <filter>
                                        <artifact>*:*</artifact>
                                        <excludes>
                                            <exclude>module-info.*</exclude>
                                            <exclude>META-INF/*.SF</exclude>
                                            <exclude>META-INF/*.DSA</exclude>
                                            <exclude>META-INF/*.RSA</exclude>
                                            <exclude>META-INF/versions/**</exclude>
                                            <exclude>META-INF/maven/**</exclude>
                                            <exclude>META-INF/*.txt</exclude>
                                        </excludes>
                                    </filter>
                                </filters>
                                <createDependencyReducedPom>false</createDependencyReducedPom>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 *****************************
                 * J2CL plugin configuration *
                 *****************************
                -->
                <plugin>
                    <!--
                                        <groupId>com.vertispan.j2cl</groupId>
                                        <artifactId>j2cl-maven-plugin</artifactId>
                    -->                 <!-- Temporarily replaced with the version deployed in webfx repo (until vertispan PR is merged and published) -->
                    <groupId>dev.webfx</groupId>
                    <artifactId>j2cl-maven-plugin-webfx</artifactId>
                    <version>${vertispan.j2cl.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>build-js</id>
                            <phase>process-classes</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- Note: Specifying dependencyReplacements removes the defaults provided by Vertispan -->
                        <dependencyReplacements>
                            <!-- So, we first re-apply the Vertispan defaults (from https://github.com/Vertispan/j2clmavenplugin/blob/320e5ba05f2916cb14839a829f73151776d1755b/j2cl-maven-plugin/src/main/java/com/vertispan/j2cl/mojo/AbstractBuildMojo.java#L91) -->
                            <dependencyReplacement>
                                <original>com.google.jsinterop:base</original>
                                <replacement>com.vertispan.jsinterop:base:${vertispan.jsinterop.base.version}</replacement>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>org.realityforge.com.google.jsinterop:base</original>
                                <replacement>com.vertispan.jsinterop:base:${vertispan.jsinterop.base.version}</replacement>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>com.google.gwt:gwt-user</original>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>com.google.gwt:gwt-dev</original>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>com.google.gwt:gwt-servlet</original>
                            </dependencyReplacement>

                            <!-- Then, we apply the replacements required for WebFX -->

                            <!-- Considering new GWT groupId -->
                            <dependencyReplacement>
                                <original>org.gwtproject:gwt-user</original>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>org.gwtproject:gwt-dev</original>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>org.gwtproject:gwt-servlet</original>
                            </dependencyReplacement>

                            <!-- OpenJFX javafx-base => WebFX emul module for javafx-base -->
                            <dependencyReplacement>
                                <original>org.openjfx:javafx-base</original>
                                <replacement>dev.webfx:webfx-kit-javafxbase-emul:${webfx.version}</replacement>
                            </dependencyReplacement>

                            <!-- OpenJFX javafx-graphics => WebFX emul module for javafx-graphics -->
                            <dependencyReplacement>
                                <original>org.openjfx:javafx-graphics</original>
                                <replacement>dev.webfx:webfx-kit-javafxgraphics-fat-j2cl:${webfx.version}</replacement>
                            </dependencyReplacement>
                            <!-- There are actually several WebFX modules for javafx-graphics, but they are all merged
                             into 1 single module for J2CL, the reason being that individual replacements were causing a
                             dependency cycle in the J2CL plugin). This merged module is a fat module of all individual
                             modules (that are still in use for GWT and for the development).
                             So, we need to replace all possible dependencies to the individual modules to that merged
                             module when compiling for J2CL. -->
                            <dependencyReplacement>
                                <original>dev.webfx:webfx-kit-launcher</original>
                                <replacement>dev.webfx:webfx-kit-javafxgraphics-fat-j2cl:${webfx.version}</replacement>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>dev.webfx:webfx-kit-javafxgraphics-emul</original>
                                <replacement>dev.webfx:webfx-kit-javafxgraphics-fat-j2cl:${webfx.version}</replacement>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>dev.webfx:webfx-kit-javafxgraphics-peers</original>
                                <replacement>dev.webfx:webfx-kit-javafxgraphics-fat-j2cl:${webfx.version}</replacement>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>dev.webfx:webfx-kit-javafxgraphics-peers-base</original>
                                <replacement>dev.webfx:webfx-kit-javafxgraphics-fat-j2cl:${webfx.version}</replacement>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>dev.webfx:webfx-kit-javafxgraphics-peers-gwt-j2cl</original>
                                <replacement>dev.webfx:webfx-kit-javafxgraphics-fat-j2cl:${webfx.version}</replacement>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>dev.webfx:webfx-kit-javafxgraphics-registry-gwt-j2cl</original>
                                <replacement>dev.webfx:webfx-kit-javafxgraphics-fat-j2cl:${webfx.version}</replacement>
                            </dependencyReplacement>
                            <dependencyReplacement>
                                <original>dev.webfx:webfx-kit-util</original>
                                <replacement>dev.webfx:webfx-kit-javafxgraphics-fat-j2cl:${webfx.version}</replacement>
                            </dependencyReplacement>

                            <!-- OpenJFX javafx-controls => WebFX emul module for javafx-controls -->
                            <dependencyReplacement>
                                <original>org.openjfx:javafx-controls</original>
                                <replacement>dev.webfx:webfx-kit-javafxcontrols-emul:${webfx.version}</replacement>
                            </dependencyReplacement>

                            <!-- OpenJFX javafx-media => WebFX emul module for javafx-media -->
                            <dependencyReplacement>
                                <original>org.openjfx:javafx-media</original>
                                <replacement>dev.webfx:webfx-kit-javafxmedia-emul:${webfx.version}</replacement>
                            </dependencyReplacement>

                            <!-- OpenJFX javafx-web => WebFX emul module for javafx-web -->
                            <dependencyReplacement>
                                <original>org.openjfx:javafx-web</original>
                                <replacement>dev.webfx:webfx-kit-javafxweb-emul:${webfx.version}</replacement>
                            </dependencyReplacement>
                        </dependencyReplacements>

                        <compilationLevel>${plugin.j2cl.compilationLevel}</compilationLevel>
                        <enableSourcemaps>${plugin.j2cl.enableSourcemaps}</enableSourcemaps>
                    </configuration>
                </plugin>


                <!--
                 ****************************
                 * GWT plugin configuration *
                 ****************************
                 -->
                <plugin>
                    <groupId>net.ltgt.gwt.maven</groupId>
                    <artifactId>gwt-maven-plugin</artifactId>
                    <version>${tbroyer.gwt.plugin.version}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <skipCompilation>${plugin.gwt.param.skipCompilation}</skipCompilation>
                        <moduleName>${plugin.gwt.param.module}</moduleName>
                        <failOnError>true</failOnError>
                        <draftCompile>${plugin.gwt.param.draftCompile}</draftCompile>
                        <optimize>${plugin.gwt.param.optimize}</optimize>
                        <sourceLevel>${gwt.sourceLevel}</sourceLevel>
                        <style>${plugin.gwt.param.style}</style>
                        <jvmArgs>
                            <!-- Was to solve a java heap OutOfMemoryError on the server -->
                            <!--<jvmArg>-Xmx1024m</jvmArg>-->
                            <!-- Uncomment to attach a debugger during GWT compilation
                            <arg>-agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=y</arg>
                            -->
                        </jvmArgs>
                        <!--<localWorkers>1</localWorkers>-->
                        <!-- Uncomment to make GWT code server remotely accessible
                         <codeserverArgs>
                            <arg>-bindAddress</arg>
                            <arg>0.0.0.0</arg>
                         </codeserverArgs>
                         -->
                    </configuration>
                </plugin>


                <!--
                 ******************************
                 * Gluon plugin configuration *
                 ******************************
                 -->
                <plugin>
                    <groupId>com.gluonhq</groupId>
                    <artifactId>gluonfx-maven-plugin</artifactId>
                    <version>${gluon.gluonfx.plugin.version}</version>
                    <configuration>
                        <target>${plugin.gluonfx.param.target}</target>
                        <mainClass>${plugin.gluonfx.param.mainClass}</mainClass>
                        <nativeImageArgs>
                            <arg>-H:ReflectionConfigurationFiles=${project.basedir}/src/main/graalvm_conf/reflection.json</arg>
                            <arg>--enable-url-protocols=webfx-css</arg>
                        </nativeImageArgs>
                        <runtimeArgs>
                            <!-- Workaround for the "No route to host" issue on iOS with IPv6 domains -->
                            <arg>-Djava.net.preferIPv4Stack=true</arg>
                        </runtimeArgs>
                        <!-- Release configuration for GitHub workflows -->
                        <releaseConfiguration>
                            <!-- iOS -->
                            <!-- Android -->
                            <versionCode>${env.GLUON_ANDROID_VERSION_CODE}</versionCode>
                            <versionName>${env.GLUON_ANDROID_VERSION_NAME}</versionName>
                            <providedKeyStorePath>${env.GLUON_ANDROID_KEYSTOREPATH}</providedKeyStorePath>
                            <providedKeyStorePassword>${env.GLUON_ANDROID_KEYSTORE_PASSWORD}</providedKeyStorePassword>
                            <providedKeyAlias>${env.GLUON_ANDROID_KEYALIAS}</providedKeyAlias>
                            <providedKeyAliasPassword>${env.GLUON_ANDROID_KEYALIAS_PASSWORD}</providedKeyAliasPassword>
                        </releaseConfiguration>
                    </configuration>
                </plugin>


                <!--
                 ******************************************************************************************
                 * JavaPackager plugin configuration (macOS/Linux package & Windows installer generation) *
                 ******************************************************************************************
                 -->
                <plugin>
                    <groupId>io.github.fvarrui</groupId>
                    <artifactId>javapackager</artifactId>
                    <version>${plugin.javapackager.version}</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>package</goal>
                            </goals>
                            <configuration>
                                <!-- mandatory -->
                                <mainClass>${plugin.javapackager.mainClass}</mainClass>
                                <runnableJar>${plugin.javapackager.runnableJar}</runnableJar>
                                <!-- optional -->
                                <bundleJre>true</bundleJre>
                                <name>${plugin.javapackager.name}</name>
                                <displayName>${plugin.javapackager.displayName}</displayName>
                                <url>${plugin.javapackager.url}</url>
                                <organizationName>${plugin.javapackager.organizationName}</organizationName>
                                <organizationUrl>${plugin.javapackager.organizationUrl}</organizationUrl>
                                <organizationEmail>${plugin.javapackager.organizationEmail}</organizationEmail>
                                <outputDirectory>${project.build.directory}/javapackager</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 ********************************************************
                 * JavaFX plugin configuration (jlink Image generation) *
                 ********************************************************
                 -->
                <plugin>
                    <groupId>org.openjfx</groupId>
                    <artifactId>javafx-maven-plugin</artifactId>
                    <version>${plugin.javafx.version}</version>
                    <configuration>
                        <jlinkImageName>jlinkImage</jlinkImageName>
                        <launcher>launcher</launcher>
                        <mainClass>${webfx.mainModule}/${webfx.mainClass}</mainClass>
                    </configuration>
                </plugin>

                <!--
                 *********************************
                 * Java CUP plugin configuration *
                 *********************************
                 Java CUP is a parser generator, it produces the parser java code from a .cup grammar file
                 -->
                <plugin>
                    <groupId>com.github.vbmacher</groupId>
                    <artifactId>cup-maven-plugin</artifactId>
                    <version>${plugin.javacup.version}</version>
                </plugin>

                <!--
                 ******************************
                 * JFlex plugin configuration *
                 ******************************
                 JFlex is a lexical analyzer generator, it produces the lexer java code from a .flex lexical file
                 -->
                <plugin>
                    <groupId>de.jflex</groupId>
                    <artifactId>jflex-maven-plugin</artifactId>
                    <version>${plugin.jflex.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>generate</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 ******************************
                 * TeaVM plugin configuration *
                 ******************************
                 -->
                <plugin>
                    <groupId>org.teavm</groupId>
                    <artifactId>teavm-maven-plugin</artifactId>
                    <version>${plugin.teavm.version}</version>
                    <dependencies>
                        <!-- This dependency is required by TeaVM to emulate a subset of Java class library -->
                        <dependency>
                            <groupId>org.teavm</groupId>
                            <artifactId>teavm-classlib</artifactId>
                            <version>${plugin.teavm.version}</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <id>TeaVm-Compile</id>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                            <phase>process-classes</phase>
                            <configuration>
                                <targetType>${plugin.teavm.param.targetType}</targetType>
                                <!-- Directory where TeaVM should put generated files. This configuration conforms to the settings of the WAR plugin -->
                                <targetDirectory>${project.build.directory}/teavm/</targetDirectory>

                                <!-- Main class, containing static void main(String[]) -->
                                <mainClass>${plugin.teavm.param.mainClass}</mainClass>

                                <!-- Whether TeaVM should produce minified JavaScript. Can reduce JavaScript file size more than two times -->
                                <minifying>${plugin.teavm.param.minifying}</minifying>
                                <!-- Whether TeaVM should produce debug information for its built-in debugger -->
                                <debugInformationGenerated>${plugin.teavm.param.debug}</debugInformationGenerated>
                                <!-- Whether TeaVM should produce the source maps file -->
                                <sourceMapsGenerated>${plugin.teavm.param.debug}</sourceMapsGenerated>
                                <!-- Whether TeaVM should also put source files into the output directory, for compatibility with source maps -->
                                <sourceFilesCopied>${plugin.teavm.param.debug}</sourceFilesCopied>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 ***********************************
                 * WebFX plugin (just for version) *
                 ***********************************
                 -->
                <plugin>
                    <groupId>dev.webfx</groupId>
                    <artifactId>webfx-maven-plugin</artifactId>
                    <version>${webfx.version}</version>
                </plugin>

                <!--
                 ********************************************
                 * Sonatype Maven Central publishing plugin *
                 ********************************************
                 -->
                <plugin>
                    <groupId>org.sonatype.central</groupId>
                    <artifactId>central-publishing-maven-plugin</artifactId>
                    <version>${plugin.sonatype.central.publish}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <publishingServerId>webfx-sonatype-central-deploy</publishingServerId>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>
            <!-- Checking the Maven version -->
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
            </plugin>

            <!-- Required to list the new Sonatype plugin here to deploy WebFX snapshots on Maven Central -->
            <plugin>
                <groupId>org.sonatype.central</groupId>
                <artifactId>central-publishing-maven-plugin</artifactId>
            </plugin>

        </plugins>

        <resources>
            <!-- 1) Standard copy of the resources, but with filtering for index.html and exe.properties -->
            <resource> <!-- no filtering for files other than index.html and exe.properties -->
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <!-- Note: important to specify the full path (not just file names) because this
                     parent pom also applies to the WebFX CLI build, and we don't want the index.html
                     and exe.properties template files to be filtered in the WebFX CLI. -->
                    <exclude>public/index.html</exclude>
                    <exclude>dev/webfx/platform/meta/exe/exe.properties</exclude>
                </excludes>
            </resource>
            <resource> <!-- filtering (maven variable replacements) for index.html and exe.properties -->
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>public/index.html</include> <!-- because of main.css?v=${maven.build.timestamp} to force CSS to reload on each new build -->
                    <include>dev/webfx/platform/meta/exe/exe.properties</include> <!-- because of mavenBuildTimestamp=${maven.build.timestamp} and environment=${webfx.meta.environment} -->
                </includes>
            </resource>
            <!-- 2) Additional copy of the sources (required for the J2CL plugin to work properly) -->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.java</include>
                    <include>**/*.js</include>
                </includes>
            </resource>
        </resources>

    </build>

    <profiles>

        <!-- profile to compile the java code into JavaScript using GWT -->
        <profile>
            <id>gwt-compile</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <plugin.gwt.param.skipCompilation>false</plugin.gwt.param.skipCompilation>
            </properties>
        </profile>

        <!-- profile to compile the java code into JavaScript using GWT -->
        <profile>
            <id>gwt-dev</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <plugin.gwt.param.draftCompile>true</plugin.gwt.param.draftCompile>
                <plugin.gwt.param.style>PRETTY</plugin.gwt.param.style>
                <plugin.gwt.param.optimize>0</plugin.gwt.param.optimize>
            </properties>
        </profile>

        <!-- profile to generate the source maps when invoking GWT -->
        <profile>
            <id>gwt-sourcemaps</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>net.ltgt.gwt.maven</groupId>
                            <artifactId>gwt-maven-plugin</artifactId>
                            <configuration>
                                <compilerArgs>
                                    <arg>-setProperty</arg>
                                    <arg>compiler.useSourceMaps=true</arg>
                                    <!-- not sure about this flag
                                    <arg>-setProperty</arg>
                                    <arg>compiler.useSymbolMaps=true</arg>
                                    -->
                                    <!-- this asks GWT to copy the java source files in a src folder, but not necessary
                                         in the end because we embed them directly in the source maps with the
                                         configuration property compiler.embedSourceMaps = true in module.gwt.xml
                                    <arg>-saveSource</arg>
                                    <arg>-saveSourceOutput</arg>
                                    <arg>${project.build.directory}/gwt-sourcemaps</arg>
                                    -->
                                </compilerArgs>
                                <!-- Asking to put the source maps directly in the webapp (rather than in gwt/deploy) -->
                                <deploy>${project.build.directory}/${project.build.finalName}</deploy>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <profile>
            <id>gluon-desktop</id>
            <properties>
                <plugin.gluonfx.param.target>host</plugin.gluonfx.param.target>
            </properties>
        </profile>

        <profile>
            <id>gluon-ios</id>
            <properties>
                <plugin.gluonfx.param.target>ios</plugin.gluonfx.param.target>
            </properties>
        </profile>

        <profile>
            <id>gluon-android</id>
            <properties>
                <plugin.gluonfx.param.target>android</plugin.gluonfx.param.target>
            </properties>
        </profile>

        <profile>
            <id>auto-attach-sources</id>
            <activation>
                <file>
                    <exists>src</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Profile to automatically include the WebFX Maven plugin on WebFX modules -->
        <!-- Note: the 'export' goal is called by default during the package phase. Other goals must be called explicitly. -->
        <profile>
            <id>auto-plugin-webfx</id>
            <!-- We recognize a WebFX module by the presence of a webfx.xml file -->
            <activation>
                <file>
                    <exists>webfx.xml</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>dev.webfx</groupId>
                        <artifactId>webfx-maven-plugin</artifactId>
                        <!-- Automatically exports webfx.xml as an artifact that will be attached to the Maven repository -->
                        <!-- This export is necessary only when deploying a WebFX library to ensure webfx.xml is up to date -->
                        <executions>
                            <execution>
                                <id>export-webfx-xml</id>
                                <phase>${plugin.webfx.param.export-phase}</phase>
                                <goals>
                                    <goal>export</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Profile to automatically include the GWT Maven plugin on GWT executable modules -->
        <!-- Note: the 'compile' goal is called by default but also skipped by default, unless the gwt-compile profile is activated -->
        <profile>
            <id>auto-plugin-gwt</id>
            <!-- We recognize an executable gwt module by the presence of a GWT module file -->
            <activation>
                <file>
                    <exists>src/main/module.gwt.xml</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <!-- Calling the GWT maven plugin to compile the gwt module into JavaScript -->
                    <plugin>
                        <groupId>net.ltgt.gwt.maven</groupId>
                        <artifactId>gwt-maven-plugin</artifactId>
                    </plugin>
                    <!-- Also calling the WebFX maven plugin to generate the PWA script -->
                    <plugin>
                        <groupId>dev.webfx</groupId>
                        <artifactId>webfx-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>pwa</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>pwa</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Profile to automatically include the GluonFX Maven plugin on Gluon executable modules -->
        <!-- Note: No goal is called by default. Goals must be called explicitly -->
        <profile>
            <id>auto-plugin-gluon</id>
            <!-- We recognize an executable gluon module by the presence of a GraalVM conf folder -->
            <activation>
                <file>
                    <exists>src/main/graalvm_conf</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.gluonhq</groupId>
                        <artifactId>gluonfx-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>auto-src-webfx</id>
            <activation>
                <file>
                    <exists>src/main/webfx</exists>
                </file>
            </activation>
            <build>
                <resources>
                    <!-- Moving the webfx sources (such as conf/) in the source artifact (will be used by WebFX CLI) -->
                    <!-- To do that, we just move them under META-INF (will be also in the build artifact despite not necessary) -->
                    <resource>
                        <directory>src/main/webfx</directory>
                        <targetPath>META-INF/webfx</targetPath>
                    </resource>
                    <!-- Also listing default resource directory explicitly (otherwise Maven will stop considering it) -->
                    <resource>
                        <directory>src/main/resources</directory>
                    </resource>
                </resources>
            </build>
        </profile>

        <profile>
            <id>production</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <webfx.meta.environment>production</webfx.meta.environment>
            </properties>
        </profile>

        <profile>
            <id>staging</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <webfx.meta.environment>staging</webfx.meta.environment>
            </properties>
        </profile>

    </profiles>

</project>